<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete case tracker data</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Deleting patient data from EM-MIS</h1>
        <div class="mb-3">
            <label for="ptUrl" class="form-label">MIS patient URL</label>
            <input type="url" class="form-control" id="ptUrl" value="https://mis-dev-docker.pmi-em.org/dhis-web-tracker-capture/index.html#/dashboard?tei=IUM3iGm37Pn&program=qDkgAbB5Jlk&ou=FgIHaDrsX9m">
            <div class="form-text">Enter the URL of the patient then click "Check" button to double check the patient. Then click "Delete" button to delete the patient.</div>
            <button id="ptCheck" class="btn btn-primary">Check</button>
        </div>
        <hr>
        <div id="ptData" class="hidden">
            <div class="d-flex flex-row">
                <div class="d-flex flex-column border w-50 m-1">
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Current reporting month</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="currRpMth"></div>
                    </div>
                </div>
                <div class="d-flex flex-column border w-50 m-1">
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Patient data reporting month</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="rpMth"></div>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row">
                <div class="d-flex flex-column border w-50 m-1">
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">TEI</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="tei"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Enrollment Id</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="enrollmentId"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Event Id</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="eventId"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">System Case ID</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="systemCaseId"></div>
                    </div>
                </div>
                <div class="d-flex flex-column border w-50 m-1">
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Name</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="ptName"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Age</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="ptAge"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Sex</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="ptSex"></div>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column border w-50 px-1 m-1">Test result</div>
                        <div class="d-flex flex-column border w-50 px-1 m-1" id="ptTestResult"></div>
                    </div>                
                </div>
            </div>
            <div class="d-flex flex-row justify-content-center">
                <div class="mb-3 w-100 px-1 m-1">
                    <label for="reason" class="form-label">Reason to delete</label>
                    <textarea class="form-control" id="reason" required></textarea>
                    <div class="form-text text-danger hidden" id="warning">You are not allowed to delete this patient data. Request central MEL team to delete this patient data by clicking "Request" button below.</div>
                </div>
            </div>
            <div class="d-flex flex-row justify-content-center">
                <button id="ptDelete" class="btn btn-danger">Delete</button>
                <button id="ptRequest" class="btn btn-warning">Request to delete</button>
            </div>
        </div>
        
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        var ptData;
        document.getElementById("ptCheck").addEventListener("click",async function() {
            let domain = await checkDomain();
            domain = new URL(domain);
            console.log(domain);
            let ptUrl = document.getElementById("ptUrl").value.trim();  // Get the value and remove extra spaces

            // Check if the URL is not empty
            if (!ptUrl) {
                alert("Patient URL is required");
                return;
            }

            // Add the protocol if missing (this helps in case user forgets 'http://' or 'https://')
            if (!ptUrl.startsWith('http://') && !ptUrl.startsWith('https://')) {
                ptUrl = 'http://' + ptUrl;  // Add 'http://' by default
            }

            try {
                let urlObj = String(ptUrl).replace("#","");
                urlObj = new URL(urlObj);  // Try to construct a valid URL object
                console.log(urlObj);

                if (domain.hostname === urlObj.hostname){                    
                    let checkTei = urlObj.searchParams.get('tei');  // Retrieve 'tei' parameter from the query string
                    console.log(checkTei);
                    let getPtUrl = `/api/getPtData/${checkTei}`;
                    let getPtResponse = await fetch(getPtUrl);
                    if (!getPtResponse.ok){
                        alert("Something went wrong");
                    }
                    let ptDataJson = await getPtResponse.json();
                    let ptDataStatus = ptDataJson.status;
                    ptData = ptDataJson.data;
                    let tmpData = {};
                    tmpData.tei = ptData.trackedEntity;
                    console.log(tmpData);
                    tmpData.enrollmentId = ptData["enrollments"][0]["enrollment"];
                    console.log(tmpData);
                    let events = ptData["enrollments"][0]["events"];
                    for (event of events){
                        if (event.programStage == "hYyB7FUS5eR"){
                            let rpMth = event.occurredAt;
                            // Parse the string into a Date object
                            rpMth = getYangonFirstDay(rpMth);
                            // // Set the date to the first day of the month
                            // rpMth.setDate(1);
                            // // Format it as a string in the desired format (YYYY-MM-DD)
                            // rpMth = rpMth.toISOString().split('T')[0];
                            tmpData.rpMth = rpMth;
                            // console.log(tmpData);

                            // Get today's date and subtract 7 days
                            let today = new Date();
                            today.setUTCDate(today.getUTCDate() - 7);
                            let currRpMth = getYangonFirstDay(today.toISOString());
                            // // Get today's date
                            // const today = new Date();
                            // // Subtract 7 days
                            // let currRpMth = new Date();
                            // currRpMth.setDate(today.getDate() - 7);
                            // // Set reqDate to the first day of its month
                            // currRpMth.setDate(1);
                            // // Format it as YYYY-MM-DD
                            // currRpMth = currRpMth.toISOString().split('T')[0];
                            tmpData.currRpMth = currRpMth;
                            console.log(tmpData);   

                            tmpData.eventId = event.events;
                            console.log(tmpData);
                            let dataValues = event.dataValues;
                            // console.log(dataValues);
                            for (dataValue of dataValues){
                                if (dataValue.dataElement == "vGxpKVMkmaW"){
                                    tmpData.ptTestResult = dataValue.value;
                                    console.log(tmpData);
                                }
                                else if (dataValue.dataElement == "ECVGASvuHV3"){
                                    tmpData.ptAge = dataValue.value;
                                    console.log(tmpData);
                                }
                            }
                        }
                    }                    
                    let attributes = ptData["enrollments"][0]["attributes"];
                    for (attribute of attributes){
                        if (attribute.attribute == "oindugucx72"){
                            tmpData.ptSex = attribute.value;
                            console.log(tmpData);
                        }
                        else if (attribute.attribute == "PFpmOsgBCif"){
                            tmpData.ptName = attribute.value;
                            console.log(tmpData);
                        }
                        else if (attribute.attribute == "NXazwhBRpfA"){
                            tmpData.systemCaseId = attribute.value;
                            console.log(tmpData);
                        }
                    }
                    console.log(tmpData);

                    Object.entries(tmpData).forEach(([key, value]) => {
                        document.getElementById(key).innerText = value;
                        // console.log(`Key: ${key}, Value: ${value}`);
                    });
                    let btnPtDelete = document.getElementById("ptDelete");
                    let btnPtRequest = document.getElementById("ptRequest");
                    let warningDiv = document.getElementById("warning");
                    if (tmpData.currRpMth == tmpData.rpMth){
                        if (btnPtDelete.classList.contains("hidden")){
                            btnPtDelete.classList.remove("hidden");
                        }
                        if (!btnPtRequest.classList.contains("hidden")){
                            btnPtRequest.classList.add("hidden");
                        }
                        if (!warningDiv.classList.contains("hidden")){
                            warningDiv.classList.add("hidden");
                        }
                    }
                    else{
                        if (!btnPtDelete.classList.contains("hidden")){
                            btnPtDelete.classList.add("hidden");
                        }
                        if (btnPtRequest.classList.contains("hidden")){
                            btnPtRequest.classList.remove("hidden");
                        }
                        if (warningDiv.classList.contains("hidden")){
                            warningDiv.classList.remove("hidden");
                        }
                    }
                    let ptDataDiv = document.getElementById("ptData");
                    if (ptDataDiv.classList.contains("hidden")){
                        ptDataDiv.classList.remove("hidden");
                    }
                }
                else{
                    alert("Requesting data to delete in wrong server")
                }
            } catch (e) {
                console.error(e);
                alert("Invalid URL format");
                return;
            }


        });
    </script>
    <script>
        async function checkDomain(){
            let response = await fetch("/api/checkDomain");
            if (!response.ok){
                throw console.error("something went wrong");
            }
            let domain = await response.json();
            return domain.domain;
        }
        // Function to adjust a date to the first day of the month in Asia/Yangon timezone
        function getYangonFirstDay(dateString) {
            const yangonOffsetMinutes = 390; // Asia/Yangon is UTC+6:30 (390 minutes)

            // Convert the input date string to a Date object
            const utcDate = new Date(dateString);

            // Adjust the UTC date to Asia/Yangon timezone
            const yangonDate = new Date(utcDate.getTime() + yangonOffsetMinutes * 60 * 1000);

            // Set the date to the first day of the month
            yangonDate.setUTCDate(1);

            // Format back to YYYY-MM-DD string
            const formattedDate = yangonDate.getUTCFullYear() + '-' +
                String(yangonDate.getUTCMonth() + 1).padStart(2, '0') + '-' +
                String(yangonDate.getUTCDate()).padStart(2, '0');

            return formattedDate;
        }
    </script>
</body>
</html>